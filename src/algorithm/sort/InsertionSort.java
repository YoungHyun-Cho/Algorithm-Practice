package algorithm.sort;

import java.util.Arrays;

/*
* # 삽입 정렬
* - 배열을 정렬된 부분과 정렬되지 않은 부분으로 나누고,
*   - 정렬되지 않은 부분의 한 요소를 "선택"한 다음,
*   - 선택한 요소를 정렬된 부분의 알맞은 위치에 "삽입"
*
* - "배열을 정렬된 부분과 정렬되지 않은 부분으로 나누고"
*   == 외부 반복문의 첫 순회는 1번 인덱스부터 시작
*       - 0번째 요소를 정렬된 부분으로 간주
*       - 1 ~ length - 1번째 요소를 정렬되지 않은 부분으로 간주
*
* - "정렬되지 않은 부분의 한 요소를 "선택""
*   == 외부 반복문의 순회를 통해 각 요소를 선택 -> arr[i]
* - 선택한 요소를 정렬된 부분의 알맞은 위치에 "삽입"
*   == 1. 내부 반복문의 순회를 통해 알맞은 위치에 삽입하면서, -> 알맞은 위치 : j로 탐색
*      2. 해당 위치 + 1 ~ 정렬된 부분 배열의 마지막 요소를 한 칸씩 뒤로 밀어냄.
*
* "1. 내부 반복문의 순회를 통해 알맞은 위치에 삽입하면서"
*   - 내부 반목문의 반복자 j로 알맞은 위치를 탐색
*   - 알맞은 위치 : 정렬된 부분 배열 중에서 왼쪽 값은 arr[i]보다 작지만, 오른쪽 값은 arr[i]보다 큰 위치
*
* "2. 해당 위치 + 1 ~ 정렬된 부분 배열의 마지막 요소를 한 칸씩 뒤로 밀어냄."
*   - arr[i]의 자리까지가 정렬된 부분 배열로 포함됨.
*   - 예 : [1, 2, 4, 3, 5]
*       -> 선택 값 : 3, -> i == 4, 정렬된 부분 배열 : [1, 2, 4]
*       -> [1, 2, 4, 3, 5] 중에서, 정렬된 부분 배열을 j로 역순회, 3이 들어갈 적절한 위치를 찾음.
*           -> 3은 2보다 크고, 4보다 작음. -> 2와 4 사이가 적절한 위치.
*       -> 4와 선택값 3을 비교 : 4가 더 큼. -> 4를 한 칸 뒤로 밀어냄 -> [1, 2, 4, 4, 5]
*       -> 2와 선택값 3을 비교 : 3이 더 큼. -> 역순회 중지. 2와 4 사이의 적절한 위치가 j에 기록됨.
*       -> j위치에 3을 할당 -> [1, 2, 3, 4, 5]
* */

public class InsertionSort implements SortAlgorithm {

    @Override
    public void test(int[] arr) {


    }
















    @Override
    public void sort(int[] arr) {

//        System.out.println(Arrays.toString(arr));

        for (int i = 1; i < arr.length; i++) {             // arr[i] : 선택값
            int j;                                         // j : 선택값이 들어갈 자리의 인덱스
            int temp = arr[i];                             // temp : 선택값을 임시 복사 (Why? 선택값이 위치한 자리에 바로앞의 값이 땡겨질 예정이므로)
            for (j = i; j > 0 && temp < arr[j - 1]; j--) { // 정렬된 부분 배열을 "선택값보다 특정 위치의 값이 클 동안만" 역순으로 순회하면서
                arr[j] = arr[j - 1];                       // 정렬된 부분 배열의 값들을 한 칸씩 뒤로 밀어냄.
            }
            arr[j] = temp;                                 // 반복문 순회가 끝난 시점에, arr[j - 1] < temp < arr[j + 1] 성립

//            System.out.println(Arrays.toString(arr));
        }
    }
}